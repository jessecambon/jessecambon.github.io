<!--This feed aggregates all posts in the 'r' category (for R-Bloggers) -->

<!-- Header -->
<feed xmlns="http://www.w3.org/2005/Atom">
<link href="https://jessecambon.github.io/r.xml" rel="self" type="application/atom+xml"/>
<link href="https://jessecambon.github.io" rel="alternate" type="text/html"/>
<updated>2019-11-11T18:43:31-05:00</updated>
<id>https://jessecambon.github.io/r.xml</id>


<!-- aggregate posts in the 'r' category -->
 
 <entry>
  <title>Geocoding with Tidygeocoder</title>
  <author>Jesse Cambon</author>
  <link>/geocoding/r/data-science/2019/11/11/tidygeocoder-demo.html</link>
  <published>Mon, 11 Nov 2019 00:00:00 -0500</published>
  <content><p><a href="https://github.com/jessecambon/tidygeocoder">Tidygeocoder</a> is a newly published R package which provides a <a href="https://www.tidyverse.org/">tidyverse</a>-style interface for geocoding. It returns latitude and longitude coordinates in <a href="https://tibble.tidyverse.org/">tibble</a> format from addresses usingÂ the <a href="https://geocoding.geo.census.gov/">US Census</a> or <a href="https://nominatim.openstreetmap.org/">Nominatim (OSM)</a> geocoder services. In this post I will demonstrate how to use it for plotting a few Washington, DC landmarks on a map in honor of the <a href="https://fivethirtyeight.com/features/the-nationals-wouldnt-say-die/">recent Washington Nationals World Series win</a>.</p>

<p>First we will construct a dataset of addresses (<code class="highlighter-rouge">dc_addresses</code>) and use the <code class="highlighter-rouge">geocode</code> function from <code class="highlighter-rouge">tidygeocoder</code> to find longitude and latitude coordinates.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidygeocoder</span><span class="p">)</span><span class="w">

</span><span class="n">dc_addresses</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tribble</span><span class="p">(</span><span class="w"> </span><span class="o">~</span><span class="n">name</span><span class="p">,</span><span class="o">~</span><span class="n">addr</span><span class="p">,</span><span class="w">
</span><span class="s2">"White House"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1600 Pennsylvania Ave Washington, DC"</span><span class="p">,</span><span class="w">
</span><span class="s2">"National Academy of Sciences"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2101 Constitution Ave NW, Washington, DC 20418"</span><span class="p">,</span><span class="w">
</span><span class="s2">"Department of Justice"</span><span class="p">,</span><span class="w"> </span><span class="s2">"950 Pennsylvania Ave NW, Washington, DC 20530"</span><span class="p">,</span><span class="w">
</span><span class="s2">"Supreme Court"</span><span class="p">,</span><span class="w"> </span><span class="s2">"1 1st St NE, Washington, DC 20543"</span><span class="p">,</span><span class="w">
</span><span class="s2">"Washington Monument"</span><span class="p">,</span><span class="w"> </span><span class="s2">"2 15th St NW, Washington, DC 20024"</span><span class="p">)</span><span class="w">

</span><span class="n">coordinates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dc_addresses</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">geocode</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="highlighter-rouge">geocode</code> function adds longitude and latitude coordinates as columns to our dataset of addresses. The default geocoder service used is the US Census, but Nominatim or a hybrid approach can be chosen with the <code class="highlighter-rouge">method</code> argument (see <a href="https://cran.r-project.org/web/packages/tidygeocoder/tidygeocoder.pdf">the documentation</a> for details). Our newly created <code class="highlighter-rouge">coordinates</code> dataset looks like this:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">name</th>
      <th style="text-align: left">addr</th>
      <th style="text-align: right">lat</th>
      <th style="text-align: right">long</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">White House</td>
      <td style="text-align: left">1600 Pennsylvania Ave Washington, DC</td>
      <td style="text-align: right">38.89875</td>
      <td style="text-align: right">-77.03535</td>
    </tr>
    <tr>
      <td style="text-align: left">National Academy of Sciences</td>
      <td style="text-align: left">2101 Constitution Ave NW, Washington, DC 20418</td>
      <td style="text-align: right">38.89211</td>
      <td style="text-align: right">-77.04678</td>
    </tr>
    <tr>
      <td style="text-align: left">Department of Justice</td>
      <td style="text-align: left">950 Pennsylvania Ave NW, Washington, DC 20530</td>
      <td style="text-align: right">38.89416</td>
      <td style="text-align: right">-77.02501</td>
    </tr>
    <tr>
      <td style="text-align: left">Supreme Court</td>
      <td style="text-align: left">1 1st St NE, Washington, DC 20543</td>
      <td style="text-align: right">38.88990</td>
      <td style="text-align: right">-77.00591</td>
    </tr>
    <tr>
      <td style="text-align: left">Washington Monument</td>
      <td style="text-align: left">2 15th St NW, Washington, DC 20024</td>
      <td style="text-align: right">38.88979</td>
      <td style="text-align: right">-77.03291</td>
    </tr>
  </tbody>
</table>

<p>Now that we have the coordinates we want to plot, we will use the <a href="https://cran.r-project.org/package=OpenStreetMap">OpenStreetMap</a> package to make a map of DC.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">OpenStreetMap</span><span class="p">)</span><span class="w">
</span><span class="n">dc_map</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">openmap</span><span class="p">(</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">38.905</span><span class="p">,</span><span class="m">-77.05</span><span class="p">),</span><span class="nf">c</span><span class="p">(</span><span class="m">38.885</span><span class="p">,</span><span class="m">-77.00</span><span class="p">))</span><span class="w">
</span><span class="n">dc_map.latlng</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">openproj</span><span class="p">(</span><span class="n">dc_map</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Note that the coordinates supplied to the <code class="highlighter-rouge">openmap</code> function above were obtained using <a href="https://www.openstreetmap.org/">openstreetmap.org</a> (use the export button to extract coordinates). The <code class="highlighter-rouge">openmap</code> function downloads a street map and the <code class="highlighter-rouge">openproj</code> function projects it onto a latitude and longitude coordinate system so that we can overlay our coordinates, which is what we do next.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggrepel</span><span class="p">)</span><span class="w">
</span><span class="n">autoplot</span><span class="p">(</span><span class="n">dc_map.latlng</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_minimal</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w">      </span><span class="n">axis.text.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
              </span><span class="n">axis.title</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
              </span><span class="n">axis.text.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
              </span><span class="n">plot.margin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">),</span><span class="w"> </span><span class="s2">"cm"</span><span class="p">)</span><span class="w">
              </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">coordinates</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">lat</span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="s2">"navy"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_label_repel</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">coordinates</span><span class="p">,</span><span class="w">
        </span><span class="n">aes</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="n">name</span><span class="p">,</span><span class="n">x</span><span class="o">=</span><span class="n">long</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">lat</span><span class="p">),</span><span class="n">show.legend</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="n">box.padding</span><span class="o">=</span><span class="m">.5</span><span class="p">,</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="/images/dc_osm_map.png" alt="dc-map" class="img-responsive" /></p>

<p>And thatâs our map. The <code class="highlighter-rouge">geom_label_repel</code> function from <code class="highlighter-rouge">ggrepel</code> provides the text labels and <code class="highlighter-rouge">geom_point</code> from <code class="highlighter-rouge">ggplot2</code> supplies the points. Alternatively, the <a href="https://rstudio.github.io/leaflet/">leaflet package</a> provides an excellent interface to plot coordinates on an interactive map. For more information on tidygeocoder, visit its home on <a href="https://github.com/jessecambon/tidygeocoder">GitHub</a> or <a href="https://cran.r-project.org/package=tidygeocoder">CRAN</a>.</p>
</content>
 </entry>
 

</feed>